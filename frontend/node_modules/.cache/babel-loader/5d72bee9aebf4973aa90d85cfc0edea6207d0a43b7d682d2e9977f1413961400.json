{"ast":null,"code":"import { create } from 'zustand';\nconst useSpeechStore = create(set => ({\n  isTTSEnabled: false,\n  isListening: false,\n  setTTSEnabled: enabled => set({\n    isTTSEnabled: enabled\n  }),\n  setListening: listening => set({\n    isListening: listening\n  })\n}));\nclass SpeechHandler {\n  constructor() {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n      this.recognition.continuous = true;\n      this.recognition.interimResults = true;\n      this.recognition.maxAlternatives = 1;\n      this.recognition.lang = 'en-US';\n    }\n    this.synthesis = window.speechSynthesis;\n    this.isListening = false;\n    this.voices = [];\n    this.loadVoices();\n    this.characterVoices = {\n      \"Hemingway\": {\n        preferredLang: 'en-US',\n        pitch: 0.85,\n        rate: 0.9,\n        voiceGender: 'male',\n        voicePriority: ['Google US English', 'Microsoft David', 'Alex']\n      },\n      \"Pynchon\": {\n        preferredLang: 'en-US',\n        pitch: 1.1,\n        rate: 1.15,\n        voiceGender: 'male',\n        voicePriority: ['Google US English', 'Microsoft Mark', 'Alex']\n      },\n      \"Dickinson\": {\n        preferredLang: 'en-US',\n        pitch: 1.2,\n        rate: 0.85,\n        voiceGender: 'female',\n        voicePriority: ['Google US English Female', 'Microsoft Zira', 'Samantha']\n      },\n      \"Moderator\": {\n        preferredLang: 'en-US',\n        pitch: 1.0,\n        rate: 1.0,\n        voiceGender: 'neutral',\n        voicePriority: ['Google US English', 'Microsoft David', 'Alex']\n      }\n    };\n    if (this.recognition) {\n      this.recognition.onresult = this.handleSpeechResult.bind(this);\n      this.recognition.onend = () => {\n        if (this.isListening) {\n          this.recognition.start();\n        }\n      };\n    }\n    if (this.synthesis) {\n      this.synthesis.addEventListener('voiceschanged', () => this.loadVoices());\n    }\n  }\n  loadVoices() {\n    this.voices = this.synthesis.getVoices();\n  }\n  findVoiceForCharacter(character) {\n    const settings = this.characterVoices[character] || this.characterVoices[\"Moderator\"];\n    let selectedVoice = null;\n    if (settings.voicePriority) {\n      for (const priorityVoice of settings.voicePriority) {\n        selectedVoice = this.voices.find(v => v.name.toLowerCase().includes(priorityVoice.toLowerCase()));\n        if (selectedVoice) break;\n      }\n    }\n    if (!selectedVoice && this.voices.length > 0) {\n      selectedVoice = this.voices[0];\n    }\n    return selectedVoice;\n  }\n  handleSpeechResult(event) {\n    for (let i = event.resultIndex; i < event.results.length; ++i) {\n      if (event.results[i].isFinal) {\n        const finalText = event.results[i][0].transcript;\n        if (this.onSpeechCallback) {\n          this.onSpeechCallback(finalText);\n        }\n      }\n    }\n  }\n  startListening(onSpeechCallback) {\n    if (!this.recognition) {\n      alert('Speech recognition is not supported in your browser.');\n      return;\n    }\n    this.isListening = true;\n    this.onSpeechCallback = onSpeechCallback;\n    try {\n      this.recognition.start();\n    } catch (error) {\n      if (error.name !== 'InvalidStateError') {\n        throw error;\n      }\n    }\n  }\n  stopListening() {\n    if (this.recognition) {\n      this.isListening = false;\n      this.recognition.stop();\n    }\n  }\n  async speak(text, character = 'Moderator') {\n    if (!this.synthesis) {\n      alert('Speech synthesis is not supported in your browser.');\n      return;\n    }\n    const wasListening = this.isListening;\n    if (wasListening) {\n      this.stopListening();\n    }\n    this.synthesis.cancel();\n    const settings = this.characterVoices[character] || this.characterVoices[\"Moderator\"];\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.voice = this.findVoiceForCharacter(character);\n    utterance.pitch = settings.pitch;\n    utterance.rate = settings.rate;\n    utterance.volume = 1.0;\n    if (!utterance.voice && settings.preferredLang) {\n      utterance.lang = settings.preferredLang;\n    }\n    return new Promise(resolve => {\n      utterance.onend = () => {\n        if (wasListening) {\n          setTimeout(() => {\n            this.startListening(this.onSpeechCallback);\n          }, 500);\n        }\n        resolve();\n      };\n      utterance.onerror = () => {\n        if (wasListening) {\n          this.startListening(this.onSpeechCallback);\n        }\n        resolve();\n      };\n      this.synthesis.speak(utterance);\n    });\n  }\n  toggleSpeech(onSpeechCallback) {\n    if (this.isListening) {\n      this.stopListening();\n    } else {\n      this.startListening(onSpeechCallback);\n    }\n    return this.isListening;\n  }\n}\nexport { SpeechHandler, useSpeechStore };","map":{"version":3,"names":["create","useSpeechStore","set","isTTSEnabled","isListening","setTTSEnabled","enabled","setListening","listening","SpeechHandler","constructor","window","recognition","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","maxAlternatives","lang","synthesis","speechSynthesis","voices","loadVoices","characterVoices","preferredLang","pitch","rate","voiceGender","voicePriority","onresult","handleSpeechResult","bind","onend","start","addEventListener","getVoices","findVoiceForCharacter","character","settings","selectedVoice","priorityVoice","find","v","name","toLowerCase","includes","length","event","i","resultIndex","results","isFinal","finalText","transcript","onSpeechCallback","startListening","alert","error","stopListening","stop","speak","text","wasListening","cancel","utterance","SpeechSynthesisUtterance","voice","volume","Promise","resolve","setTimeout","onerror","toggleSpeech"],"sources":["/home/peter/convo/frontend/src/lib/SpeechHandler.js"],"sourcesContent":["import { create } from 'zustand';\n\nconst useSpeechStore = create((set) => ({\n  isTTSEnabled: false,\n  isListening: false,\n  setTTSEnabled: (enabled) => set({ isTTSEnabled: enabled }),\n  setListening: (listening) => set({ isListening: listening }),\n}));\n\nclass SpeechHandler {\n  constructor() {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n      this.recognition.continuous = true;\n      this.recognition.interimResults = true;\n      this.recognition.maxAlternatives = 1;\n      this.recognition.lang = 'en-US';\n    }\n\n    this.synthesis = window.speechSynthesis;\n    this.isListening = false;\n    this.voices = [];\n    this.loadVoices();\n\n    this.characterVoices = {\n      \"Hemingway\": {\n        preferredLang: 'en-US',\n        pitch: 0.85,\n        rate: 0.9,\n        voiceGender: 'male',\n        voicePriority: ['Google US English', 'Microsoft David', 'Alex']\n      },\n      \"Pynchon\": {\n        preferredLang: 'en-US',\n        pitch: 1.1,\n        rate: 1.15,\n        voiceGender: 'male',\n        voicePriority: ['Google US English', 'Microsoft Mark', 'Alex']\n      },\n      \"Dickinson\": {\n        preferredLang: 'en-US',\n        pitch: 1.2,\n        rate: 0.85,\n        voiceGender: 'female',\n        voicePriority: ['Google US English Female', 'Microsoft Zira', 'Samantha']\n      },\n      \"Moderator\": {\n        preferredLang: 'en-US',\n        pitch: 1.0,\n        rate: 1.0,\n        voiceGender: 'neutral',\n        voicePriority: ['Google US English', 'Microsoft David', 'Alex']\n      }\n    };\n\n    if (this.recognition) {\n      this.recognition.onresult = this.handleSpeechResult.bind(this);\n      this.recognition.onend = () => {\n        if (this.isListening) {\n          this.recognition.start();\n        }\n      };\n    }\n\n    if (this.synthesis) {\n      this.synthesis.addEventListener('voiceschanged', () => this.loadVoices());\n    }\n  }\n\n  loadVoices() {\n    this.voices = this.synthesis.getVoices();\n  }\n\n  findVoiceForCharacter(character) {\n    const settings = this.characterVoices[character] || this.characterVoices[\"Moderator\"];\n    let selectedVoice = null;\n    \n    if (settings.voicePriority) {\n      for (const priorityVoice of settings.voicePriority) {\n        selectedVoice = this.voices.find(v => \n          v.name.toLowerCase().includes(priorityVoice.toLowerCase())\n        );\n        if (selectedVoice) break;\n      }\n    }\n\n    if (!selectedVoice && this.voices.length > 0) {\n      selectedVoice = this.voices[0];\n    }\n\n    return selectedVoice;\n  }\n\n  handleSpeechResult(event) {\n    for (let i = event.resultIndex; i < event.results.length; ++i) {\n      if (event.results[i].isFinal) {\n        const finalText = event.results[i][0].transcript;\n        if (this.onSpeechCallback) {\n          this.onSpeechCallback(finalText);\n        }\n      }\n    }\n  }\n\n  startListening(onSpeechCallback) {\n    if (!this.recognition) {\n      alert('Speech recognition is not supported in your browser.');\n      return;\n    }\n    this.isListening = true;\n    this.onSpeechCallback = onSpeechCallback;\n    try {\n      this.recognition.start();\n    } catch (error) {\n      if (error.name !== 'InvalidStateError') {\n        throw error;\n      }\n    }\n  }\n\n  stopListening() {\n    if (this.recognition) {\n      this.isListening = false;\n      this.recognition.stop();\n    }\n  }\n\n  async speak(text, character = 'Moderator') {\n    if (!this.synthesis) {\n      alert('Speech synthesis is not supported in your browser.');\n      return;\n    }\n\n    const wasListening = this.isListening;\n    if (wasListening) {\n      this.stopListening();\n    }\n\n    this.synthesis.cancel();\n\n    const settings = this.characterVoices[character] || this.characterVoices[\"Moderator\"];\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    utterance.voice = this.findVoiceForCharacter(character);\n    utterance.pitch = settings.pitch;\n    utterance.rate = settings.rate;\n    utterance.volume = 1.0;\n\n    if (!utterance.voice && settings.preferredLang) {\n      utterance.lang = settings.preferredLang;\n    }\n\n    return new Promise((resolve) => {\n      utterance.onend = () => {\n        if (wasListening) {\n          setTimeout(() => {\n            this.startListening(this.onSpeechCallback);\n          }, 500);\n        }\n        resolve();\n      };\n\n      utterance.onerror = () => {\n        if (wasListening) {\n          this.startListening(this.onSpeechCallback);\n        }\n        resolve();\n      };\n\n      this.synthesis.speak(utterance);\n    });\n  }\n\n  toggleSpeech(onSpeechCallback) {\n    if (this.isListening) {\n      this.stopListening();\n    } else {\n      this.startListening(onSpeechCallback);\n    }\n    return this.isListening;\n  }\n}\n\nexport { SpeechHandler, useSpeechStore };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}